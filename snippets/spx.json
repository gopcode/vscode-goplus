{
	".source.spx": {
		"single import": {
			"prefix": "im",
			"body": "import \"${1:package}\"",
			"description": "import statement"
		},
		"multiple imports": {
			"prefix": "ims",
			"body": "import (\n\t\"${1:package}\"\n)",
			"description": "a import block"
		},
		"single constant": {
			"prefix": "co",
			"body": "const ${1:name} = ${2:value}",
			"description": "a constant"
		},
		"multiple constants": {
			"prefix": "cos",
			"body": "const (\n\t${1:name} = ${2:value}\n)",
			"description": "a constant block"
		},
		"type interface declaration": {
			"prefix": "tyi",
			"body": "type ${1:name} interface {\n\t$0\n}",
			"description": "a type interface"
		},
		"type struct declaration": {
			"prefix": "tys",
			"body": "type ${1:name} struct {\n\t$0\n}",
			"description": "a struct declaration"
		},
		"package main and main function": {
			"prefix": "pkgm",
			"body": "package main\n\nfunc main() {\n\t$0\n}",
			"description": "main package & function"
		},
		"function declaration": {
			"prefix": "func",
			"body": "func $1($2) $3 {\n\t$0\n}",
			"description": "function declaration"
		},
		"variable declaration": {
			"prefix": "var",
			"body": "var ${1:name} ${2:type}",
			"description": "a variable"
		},
		"switch statement": {
			"prefix": "switch",
			"body": "switch ${1:expression} {\ncase ${2:condition}:\n\t$0\n}",
			"description": "switch statement"
		},
		"select statement": {
			"prefix": "sel",
			"body": "select {\ncase ${1:condition}:\n\t$0\n}",
			"description": "select statement"
		},
		"case clause": {
			"prefix": "cs",
			"body": "case ${1:condition}:$0",
			"description": "case clause"
		},
		"for statement": {
			"prefix": "for",
			"body": "for ${1:i} := 0; $1 < ${2:count}; $1${3:++} {\n\t$0\n}",
			"description": "a for loop"
		},
		"for range statement": {
			"prefix": "forr",
			"body": "for ${1:_, }${2:var} := range ${3:var} {\n\t$0\n}",
			"description": "a for range loop"
		},
		"for arrow statement": {
			"prefix": "for-",
			"body": "for ${1:i}, ${2:j} <- ${3:k} {\n\t$0\n}",
			"description": "a for arrow loop"
		},
		"channel declaration": {
			"prefix": "ch",
			"body": "chan ${1:type}",
			"description": "a channel"
		},
		"map declaration": {
			"prefix": "map",
			"body": "map[${1:type}]${2:type}",
			"description": "a map"
		},
		"empty interface": {
			"prefix": "in",
			"body": "interface{}",
			"description": "empty interface"
		},
		"if statement": {
			"prefix": "if",
			"body": "if ${1:condition} {\n\t$0\n}",
			"description": "if statement"
		},
		"else branch": {
			"prefix": "el",
			"body": "else {\n\t$0\n}",
			"description": "else branch"
		},
		"if else statement": {
			"prefix": "ie",
			"body": "if ${1:condition} {\n\t$2\n} else {\n\t$0\n}",
			"description": "if else"
		},
		"if err != nil": {
			"prefix": "iferr",
			"body": "if err != nil {\n\t${1:return ${2:nil, }${3:err}}\n}",
			"description": "if err != nil"
		},
		"println": {
			"prefix": "pr",
			"body": "println(\"$1\")",
			"description": "println()"
		},
		"fmt.Println": {
			"prefix": "fp",
			"body": "fmt.Println(\"$1\")",
			"description": "fmt.Println()"
		},
		"fmt.Printf": {
			"prefix": "ff",
			"body": "fmt.Printf(\"$1\", ${2:var})",
			"description": "fmt.Printf()"
		},
		"log.Println": {
			"prefix": "lp",
			"body": "log.Println(\"$1\")",
			"description": "log.Println()"
		},
		"log.Printf": {
			"prefix": "lf",
			"body": "log.Printf(\"$1\", ${2:var})",
			"description": "log.Printf()"
		},
		"log variable content": {
			"prefix": "lv",
			"body": "log.Printf(\"${1:var}: %#+v\\\\n\", ${1:var})",
			"description": "log.Printf() with variable content"
		},
		"t.Log": {
			"prefix": "tl",
			"body": "t.Log(\"$1\")",
			"description": "t.Log()"
		},
		"t.Logf": {
			"prefix": "tlf",
			"body": "t.Logf(\"$1\", ${2:var})",
			"description": "t.Logf()"
		},
		"t.Logf variable content": {
			"prefix": "tlv",
			"body": "t.Logf(\"${1:var}: %#+v\\\\n\", ${1:var})",
			"description": "t.Logf() with variable content"
		},
		"make(...)": {
			"prefix": "make",
			"body": "make(${1:type}, ${2:0})",
			"description": "make statement"
		},
		"new(...)": {
			"prefix": "new",
			"body": "new(${1:type})",
			"description": "new statement"
		},
		"panic(...)": {
			"prefix": "pn",
			"body": "panic(\"$0\")",
			"description": "panic"
		},
		"http ResponseWriter *Request": {
			"prefix": "wr",
			"body": "${1:w} http.ResponseWriter, ${2:r} *http.Request",
			"description": "http Response"
		},
		"http.HandleFunc": {
			"prefix": "hf",
			"body": "${1:http}.HandleFunc(\"${2:/}\", ${3:handler})",
			"description": "http.HandleFunc()"
		},
		"http handler declaration": {
			"prefix": "hand",
			"body": "func $1(${2:w} http.ResponseWriter, ${3:r} *http.Request) {\n\t$0\n}",
			"description": "http handler declaration"
		},
		"http.Redirect": {
			"prefix": "rd",
			"body": "http.Redirect(${1:w}, ${2:r}, \"${3:/}\", ${4:http.StatusFound})",
			"description": "http.Redirect()"
		},
		"http.Error": {
			"prefix": "herr",
			"body": "http.Error(${1:w}, ${2:err}.Error(), ${3:http.StatusInternalServerError})",
			"description": "http.Error()"
		},
		"http.ListenAndServe": {
			"prefix": "las",
			"body": "http.ListenAndServe(\"${1::8080}\", ${2:nil})",
			"description": "http.ListenAndServe"
		},
		"http.Serve": {
			"prefix": "sv",
			"body": "http.Serve(\"${1::8080}\", ${2:nil})",
			"description": "http.Serve"
		},
		"goroutine anonymous function": {
			"prefix": "go",
			"body": "go func($1) {\n\t$0\n}($2)",
			"description": "anonymous goroutine declaration"
		},
		"goroutine function": {
			"prefix": "gf",
			"body": "go ${1:func}($0)",
			"description": "goroutine declaration"
		},
		"defer statement": {
			"prefix": "df",
			"body": "defer ${1:func}($0)",
			"description": "defer statement"
		},
		"test function": {
			"prefix": "tf",
			"body": "func Test$1(t *testing.T) {\n\t$0\n}",
			"description": "Test function"
		},
		"benchmark function": {
			"prefix": "bf",
			"body": "func Benchmark$1(b *testing.B) {\n\tfor ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {\n\t\t$0\n\t}\n}",
			"description": "Benchmark function"
		},
		"example function": {
			"prefix": "ef",
			"body": "func Example$1() {\n\t$2\n\t//Output:\n\t$3\n}",
			"description": "Example function"
		},
		"table driven test": {
			"prefix": "tdt",
			"body": "func Test$1(t *testing.T) {\n\ttestCases := []struct {\n\t\tdesc\tstring\n\t\t$2\n\t}{\n\t\t{\n\t\t\tdesc: \"$3\",\n\t\t\t$4\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\t$0\n\t\t})\n\t}\n}",
			"description": "table driven test"
		},
		"init function": {
			"prefix": "finit",
			"body": "func init() {\n\t$1\n}",
			"description": "init function"
		},
		"main function": {
			"prefix": "fmain",
			"body": "func main() {\n\t$1\n}",
			"description": "main function"
		},
		"method declaration": {
			"prefix": "meth",
			"body": "func (${1:receiver} ${2:type}) ${3:method}($4) $5 {\n\t$0\n}",
			"description": "method declaration"
		},
		"hello world web app": {
			"prefix": "helloweb",
			"body": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc greet(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World! %s\", time.Now())\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", greet)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
			"description": "sample hello world webapp"
		},
		"sort implementation": {
			"prefix": "sort",
			"body": "type ${1:SortBy} []${2:Type}\n\nfunc (a $1) Len() int           { return len(a) }\nfunc (a $1) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a $1) Less(i, j int) bool { ${3:return a[i] < a[j]} }",
			"description": "a custom sort.Sort interface implementation, for a given slice type."
		},
		"spx move N steps": {
			"prefix": "step",
			"body": "step ${1:N}",
			"description": "spx move N steps"
		},
		"spx move N step": {
			"prefix": "move",
			"body": "move ${1:N}",
			"description": "spx move N steps"
		},
		"spx turn X": {
			"prefix": "turn",
			"body": "turn ${1:X}",
			"description": "spx turn X"
		},
		"spx changeHeading N": {
			"prefix": "changeHeading",
			"body": "changeHeading ${1:N}",
			"description": "spx changeHeading N"
		},
		"spx goto o": {
			"prefix": "goto",
			"body": "goto ${1:O}",
			"description": "spx goto o"
		},
		"spx setXYpos x, y": {
			"prefix": "setXYpos",
			"body": "setXYpos ${1:X}, ${2:Y}",
			"description": "spx setXYpos x, y"
		},
		"spx glide O, N": {
			"prefix": "glide",
			"body": "glide ${1:O}, ${2:N}",
			"description": "spx glide O, N"
		},
		"spx glide X, Y, N": {
			"prefix": "glide",
			"body": "glide ${1:X}, ${2:Y}, ${3:N}",
			"description": "spx glide X, Y, N"
		},
		"spx turnTo N": {
			"prefix": "turnTo",
			"body": "turnTo ${1:N}",
			"description": "spx turnTo N"
		},
		"spx turnTo O": {
			"prefix": "turnTo",
			"body": "turnTo ${1:O}",
			"description": "spx turnTo O"
		},
		"spx changeXpos Dx": {
			"prefix": "changeXpos",
			"body": "changeXpos ${1:Dx}",
			"description": "spx changeXpos Dx"
		},
		"spx setXpos X": {
			"prefix": "setXpos",
			"body": "setXpos ${1:X}",
			"description": "spx setXpos X"
		},
		"spx changeXpos Dy": {
			"prefix": "changeYpos",
			"body": "changeYpos ${1:Dy}",
			"description": "spx changeXpos Dy"
		},
		"spx setYpos Y": {
			"prefix": "setYpos",
			"body": "setYpos ${1:Y}",
			"description": "spx setYpos Y"
		},
		"spx changeXYpos Dx, Dy": {
			"prefix": "changeXYpos",
			"body": "changeXYpos ${1:Dx}, ${2:Dy}",
			"description": "spx changeXYpos Dx, Dy"
		},
		"spx bounceOffEdge": {
			"prefix": "bounceOffEdge",
			"body": "bounceOffEdge",
			"description": "spx bounceOffEdge"
		},
		"spx setRotationStyle S": {
			"prefix": "setRotationStyle",
			"body": "setRotationStyle ${1:S}",
			"description": "spx setRotationStyle S"
		},
		"spx xpos": {
			"prefix": "xpos",
			"body": "xpos",
			"description": "spx xpos"
		},
		"spx ypos": {
			"prefix": "ypos",
			"body": "ypos",
			"description": "spx ypos"
		},
		"spx heading": {
			"prefix": "heading",
			"body": "heading",
			"description": "spx heading"
		},
		"spx say V, N": {
			"prefix": "say",
			"body": "say ${1:V}, ${2:N}",
			"description": "spx say V, N"
		},
		"spx say V": {
			"prefix": "say",
			"body": "say ${1:V}",
			"description": "spx say V"
		},
		"spx think V, N": {
			"prefix": "think",
			"body": "think ${1:V}, ${2:N}",
			"description": "spx think V, N"
		},
		"spx think V": {
			"prefix": "think",
			"body": "think ${1:V}",
			"description": "spx think V"
		},
		"spx setCostume N": {
			"prefix": "setCostume",
			"body": "setCostume ${1:N}",
			"description": "spx setCostume N"
		},
		"spx nextCostume": {
			"prefix": "nextCostume",
			"body": "nextCostume",
			"description": "spx nextCostume"
		},
		"spx prevCostume": {
			"prefix": "prevCostume",
			"body": "prevCostume",
			"description": "spx prevCostume"
		},
		"spx animate name": {
			"prefix": "animate",
			"body": "animate ${1:Name}",
			"description": "spx animate name"
		},
		"spx startScene N": {
			"prefix": "startScene",
			"body": "startScene ${1:N}",
			"description": "spx startScene N"
		},
		"spx startScene N, Waitt": {
			"prefix": "startScene",
			"body": "startScene ${1:N}, ${2:Wait}",
			"description": "spx startScene N, Wait"
		},
		"spx nextScene": {
			"prefix": "nextScene",
			"body": "nextScene",
			"description": "spx nextScene"
		},
		"spx prevScene": {
			"prefix": "prevScene",
			"body": "prevScene",
			"description": "spx prevScene"
		},
		"spx changeSize": {
			"prefix": "changeSize",
			"body": "changeSize",
			"description": "spx changeSize"
		},
		"spx setSize": {
			"prefix": "setSize",
			"body": "setSize",
			"description": "spx setSize"
		},
		"spx changeEffect g,n": {
			"prefix": "changeEffect",
			"body": "changeEffect ${1:G}, ${2:N}",
			"description": "spx changeEffect g,n"
		},
		"spx setEffect g,n": {
			"prefix": "setEffect",
			"body": "setEffect ${1:G}, ${2:N}",
			"description": "spx setEffect g,n"
		},
		"spx clearGraphEffects": {
			"prefix": "clearGraphEffects",
			"body": "clearGraphEffects",
			"description": "spx clearGraphEffects"
		},
		"spx show": {
			"prefix": "show",
			"body": "show",
			"description": "spx show"
		},
		"spx hide": {
			"prefix": "hide",
			"body": "hide",
			"description": "spx hide"
		},
		"spx gotoFront": {
			"prefix": "gotoFront",
			"body": "gotoFront",
			"description": "spx gotoFront"
		},
		"spx gotoBackr": {
			"prefix": "gotoBack",
			"body": "gotoBack",
			"description": "spx gotoBack"
		},
		"spx goBackLayer N": {
			"prefix": "goBackLayer",
			"body": "goBackLayer ${1:N}",
			"description": "spx goBackLayer N"
		},
		"spx costumeIndex": {
			"prefix": "costumeIndex",
			"body": "costumeIndex",
			"description": "spx costumeIndex"
		},
		"spx costumeName": {
			"prefix": "costumeName",
			"body": "costumeName",
			"description": "spx costumeName"
		},
		"spx sceneIndex": {
			"prefix": "sceneIndex",
			"body": "sceneIndex",
			"description": "spx sceneIndex"
		},
		"spx sceneName": {
			"prefix": "sceneName",
			"body": "sceneName",
			"description": "spx sceneName"
		},
		"spx size": {
			"prefix": "size",
			"body": "size",
			"description": "spx size"
		},
		"spx width": {
			"prefix": "width",
			"body": "width",
			"description": "spx width"
		},
		"spx height": {
			"prefix": "height",
			"body": "height",
			"description": "spx height"
		},
		"spx play S, true": {
			"prefix": "play",
			"body": "play ${1:S}, true",
			"description": "spx play S, true"
		},
		"spx play S": {
			"prefix": "play",
			"body": "play ${1:S}",
			"description": "spx play S"
		},
		"spx stopAllSounds": {
			"prefix": "stopAllSounds",
			"body": "stopAllSounds",
			"description": "spx stopAllSounds"
		},
		"spx changeEffect s,n": {
			"prefix": "changeEffect",
			"body": "changeEffect ${1:S}, ${2:N}",
			"description": "spx changeEffect s,n"
		},
		"spx setEffect s,n": {
			"prefix": "setEffect",
			"body": "setEffect ${1:S}, ${2:N}",
			"description": "spx setEffect s,n"
		},
		"spx clearSoundEffect": {
			"prefix": "clearSoundEffect",
			"body": "clearSoundEffect",
			"description": "spx clearSoundEffect"
		},
		"spx changeVolume N": {
			"prefix": "changeVolume",
			"body": "changeVolume N",
			"description": "spx changeVolume N"
		},
		"spx setVolume N": {
			"prefix": "setVolume",
			"body": "setVolume ${1:N}",
			"description": "spx setVolume N"
		},
		"spx onStart": {
			"prefix": "onStart",
			"body": "onStart => {\n\t$0\n}",
			"description": "spx onStart"
		},
		"spx onAnyKey": {
			"prefix": "onAnyKey",
			"body": "onAnyKey ${1:key} => {\n\t$0\n}",
			"description": "spx onAnyKey"
		},
		"spx onAnyKeys": {
			"prefix": "onAnyKey",
			"body": "onAnyKey ${1:key}, => {\n\t$0\n}",
			"description": "spx onAnyKey"
		},
		"spx onAnyKey slice": {
			"prefix": "onAnyKey",
			"body": "onAnyKey [${1:key}], => {\n\t$0\n}",
			"description": "spx onAnyKey"
		},
		"spx onClick": {
			"prefix": "onClick",
			"body": "onClick => {\n\t$0\n}",
			"description": "spx onClick"
		},
		"spx onAnyScene name": {
			"prefix": "onAnyScene",
			"body": "onAnyScene ${1:name} => {\n\t$0\n}",
			"description": "spx onAnyScene name"
		},
		"spx onScene name": {
			"prefix": "onScene",
			"body": "onScene ${1:N} => {\n\t$0\n}",
			"description": "spx onScene name"
		},
		"spx onMsg": {
			"prefix": "onMsg",
			"body": "onMsg ${1:Msg} => {\n\t$0\n}",
			"description": "spx onMsg"
		},
		"spx onMoving": {
			"prefix": "onMoving",
			"body": "onMoving => {\n\t$0\n}",
			"description": "spx onMoving"
		},
		"spx onTurning": {
			"prefix": "onTurning",
			"body": "onTurning => {\n\t$0\n}",
			"description": "spx onTurning"
		},
		"spx broadcast": {
			"prefix": "broadcast",
			"body": "broadcast ${1:Msg}",
			"description": "spx broadcast"
		},
		"spx broadcast Msg,true": {
			"prefix": "broadcast",
			"body": "broadcast ${1:Msg}, true",
			"description": "spx broadcast Msg,true"
		},
		"spx wait N": {
			"prefix": "wait",
			"body": "wait ${1:N}",
			"description": "spx wait N"
		},
		"spx onClone": {
			"prefix": "onClone",
			"body": "onClone => {\n\t$0\n}",
			"description": "spx onClone"
		},
		"spx clone": {
			"prefix": "clone",
			"body": "clone",
			"description": "spx clone"
		},
		"spx Sprite.clone": {
			"prefix": "Sprite.clone",
			"body": "Sprite.clone",
			"description": "spx Sprite.clone"
		},
		"spx destroy": {
			"prefix": "destroy",
			"body": "destroy",
			"description": "spx destroy"
		},
		"spx die": {
			"prefix": "die",
			"body": "die",
			"description": "spx die"
		},
		"spx setDying": {
			"prefix": "setDying",
			"body": "setDying",
			"description": "spx setDying"
		},
		"spx stopped": {
			"prefix": "stopped",
			"body": "stopped",
			"description": "spx stopped"
		},
		"spx cloned": {
			"prefix": "cloned",
			"body": "cloned",
			"description": "spx cloned"
		},
		"spx touching O": {
			"prefix": "touching",
			"body": "touching ${1:O}",
			"description": "spx touching O"
		},
		"spx onTouched": {
			"prefix": "onTouched",
			"body": "onTouched => {\n\t$0\n}",
			"description": "spx onTouched"
		},
		"spx touchingColor": {
			"prefix": "touchingColor",
			"body": "touchingColor ${1:Color}",
			"description": "spx touchingColor"
		},
		"spx distanceTo": {
			"prefix": "distanceTo",
			"body": "distanceTo($0)",
			"description": "spx distanceTo"
		},
		"spx ask Msg": {
			"prefix": "ask",
			"body": "ask ${1:Msg}",
			"description": "spx ask Msg"
		},
		"spx answer": {
			"prefix": "answer",
			"body": "answer",
			"description": "spx answer"
		},
		"spx keyPressed": {
			"prefix": "keyPressed",
			"body": "keyPressed",
			"description": "spx keyPressed"
		},
		"spx mousePressed": {
			"prefix": "mousePressed",
			"body": "mousePressed",
			"description": "spx mousePressed"
		},
		"spx mouseX": {
			"prefix": "mouseX",
			"body": "mouseX",
			"description": "spx mouseX"
		},
		"spx mouseY": {
			"prefix": "mouseY",
			"body": "mouseY",
			"description": "spx mouseY"
		},
		"spx timer": {
			"prefix": "timer",
			"body": "timer",
			"description": "spx timer"
		},
		"spx resetTimer": {
			"prefix": "resetTimer",
			"body": "resetTimer",
			"description": "spx resetTimer"
		},
		"spx username": {
			"prefix": "username",
			"body": "username",
			"description": "spx username"
		},
		"spx clear": {
			"prefix": "clear",
			"body": "clear",
			"description": "spx clear"
		},
		"spx stamp": {
			"prefix": "stamp",
			"body": "stamp",
			"description": "spx stamp"
		},
		"spx penDown": {
			"prefix": "penDown",
			"body": "penDown",
			"description": "spx penDown"
		},
		"spx penUp": {
			"prefix": "penUp",
			"body": "penUp",
			"description": "spx penUp"
		},
		"spx setPenColor C": {
			"prefix": "setPenColor",
			"body": "setPenColor ${1:C}",
			"description": "spx setPenColor C"
		},
		"spx changePenSize N": {
			"prefix": "changePenSize",
			"body": "changePenSize ${1:N}",
			"description": "spx changePenSize N"
		},
		"spx setPenSize N": {
			"prefix": "setPenSize",
			"body": "setPenSize ${1:N}",
			"description": "spx setPenSize N"
		}
	}
}